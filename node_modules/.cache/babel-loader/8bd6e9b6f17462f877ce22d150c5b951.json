{"ast":null,"code":"import _taggedTemplateLiteral from \"A:\\\\HTML 5\\\\graphQL\\\\code\\\\project-create-react-app\\\\post-system\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"A:\\\\HTML 5\\\\graphQL\\\\code\\\\project-create-react-app\\\\post-system\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"A:\\\\HTML 5\\\\graphQL\\\\code\\\\project-create-react-app\\\\post-system\\\\src\\\\client\\\\components\\\\members\\\\createpost.js\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"query { checkAuth }\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"mutation CreatePost($title: String!, $description: String! ){\\n\\t\\tcreatePost(postInput: {title: $title, description: $description}) {\\n\\t\\t\\ttitle\\n\\t\\t\\tdescription\\n\\t\\t}\\n\\t}\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { createRef, useState, useEffect, useContext } from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport AuthContext from \"../../context/AuthContext\";\nimport styledComponents from \"../../styled-components/styledComponents\";\nimport fn from \"../../functions/functions\";\nvar Content = styledComponents.Content,\n    H1 = styledComponents.H1,\n    Textarea = styledComponents.Textarea,\n    LoginButton = styledComponents.LoginButton,\n    CreatPostForm = styledComponents.CreatPostForm,\n    LoginInput = styledComponents.LoginInput;\nvar purify = fn.purify;\n\nvar CreatePostDisplay = function CreatePostDisplay() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      postDoneMsg = _useState2[0],\n      setPostDoneMsg = _useState2[1];\n\n  var postDone = function postDone(data) {\n    setPostDoneMsg(true);\n  };\n\n  var description = createRef();\n  var title = createRef();\n  var reqBody = gql(_templateObject());\n\n  if (postDoneMsg) {\n    return React.createElement(H1, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"Your post has been published successfully!\");\n  }\n\n  return React.createElement(Mutation, {\n    mutation: reqBody,\n    onCompleted: postDone,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, function (createPost, response) {\n    return React.createElement(CreatPostForm, {\n      onSubmit: function onSubmit(event) {\n        event.preventDefault();\n        createPost({\n          variables: {\n            title: title.current.value,\n            description: purify(description.current.value)\n          }\n        }).then(function (result) {\n          return result;\n        }).catch(function (err) {\n          return console.log(err);\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"Create a new post:\"), React.createElement(LoginInput, {\n      type: \"text\",\n      required: true,\n      maxlength: \"170\",\n      name: \"title\",\n      placeholder: \"Title\",\n      ref: title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }), React.createElement(Textarea, {\n      rows: \"8\",\n      placeholder: \"Post your comment here...\",\n      ref: description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), React.createElement(LoginButton, {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"Post\"));\n  });\n};\n\nvar CreatePost = function CreatePost(props) {\n  var value = useContext(AuthContext);\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      auth = _useState4[0],\n      setAuth = _useState4[1];\n\n  useEffect(function () {\n    value.client.query({\n      query: gql(_templateObject2())\n    }).then(function (res) {\n      return !res.data.checkAuth ? props.history.push(\"/auth\") : setAuth(true);\n    }).catch(function (err) {\n      return props.history.push(\"/auth\");\n    });\n  });\n  return React.createElement(Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, auth ? React.createElement(CreatePostDisplay, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }) : null);\n};\n\nexport default CreatePost;","map":{"version":3,"sources":["A:\\HTML 5\\graphQL\\code\\project-create-react-app\\post-system\\src\\client\\components\\members\\createpost.js"],"names":["React","createRef","useState","useEffect","useContext","Mutation","gql","AuthContext","styledComponents","fn","Content","H1","Textarea","LoginButton","CreatPostForm","LoginInput","purify","CreatePostDisplay","postDoneMsg","setPostDoneMsg","postDone","data","description","title","reqBody","createPost","response","event","preventDefault","variables","current","value","then","result","catch","err","console","log","CreatePost","props","auth","setAuth","client","query","res","checkAuth","history","push"],"mappings":"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","sourcesContent":["import React, { createRef, useState, useEffect , useContext } from \"react\"\r\nimport { Mutation } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport AuthContext from \"../../context/AuthContext\"\r\nimport styledComponents from \"../../styled-components/styledComponents\"\r\nimport fn from \"../../functions/functions\"\r\nconst { Content, H1, Textarea, LoginButton, CreatPostForm, LoginInput } = styledComponents\r\n\r\nconst { purify } = fn\r\n\r\nconst CreatePostDisplay = () => {\r\n\r\n\tconst [ postDoneMsg, setPostDoneMsg ] = useState( false )\r\n\tconst postDone = ( data ) => {\r\n\t\tsetPostDoneMsg( true )\r\n\t}\r\n\tconst description = createRef()\r\n\tconst title = createRef()\r\n\tlet reqBody = gql `mutation CreatePost($title: String!, $description: String! ){\r\n\t\tcreatePost(postInput: {title: $title, description: $description}) {\r\n\t\t\ttitle\r\n\t\t\tdescription\r\n\t\t}\r\n\t}`\r\n\r\n\tif ( postDoneMsg ) { return <H1>Your post has been published successfully!</H1> }\r\n\r\n\t\treturn (\r\n\t\t\t<Mutation mutation={reqBody} onCompleted={postDone}>\r\n\r\n\t\t\t{(createPost, response) => {\r\n\r\n\t\t\t\treturn(\t\t\r\n\r\n\t\t\t\t\t<CreatPostForm onSubmit={  (event) => {\r\n\t\t\t\t\t\tevent.preventDefault()\r\n\t\t\t\t\t\tcreatePost({ variables: { title: title.current.value, \r\n\t\t\t\t\t\t\tdescription: purify(description.current.value)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t\t\t.then(result => {\r\n\t\t\t\t\t\t\treturn result\r\n\t\t\t\t\t\t}).catch(err=> console.log(err)) \r\n\t\t\t\t\t}} >\r\n\r\n\t\t\t\t\t<h1>Create a new post:</h1>\r\n\t\t\t\t\t<LoginInput type=\"text\" required maxlength=\"170\" name=\"title\" placeholder=\"Title\" ref={title} />\r\n\t\t\t\t\t<Textarea rows=\"8\" placeholder=\"Post your comment here...\" ref={description} />\t\t\r\n\t\t\t\t\t<LoginButton type=\"submit\">Post</LoginButton>\r\n\r\n\t\t\t\t\t</CreatPostForm>\r\n\t\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\t\t</Mutation>\r\n\t\t)\r\n}\r\n\r\n\r\nconst CreatePost = (props) => {\r\n\tconst value = useContext( AuthContext )\r\n\tconst [auth, setAuth] = useState(false)\r\n\r\n\tuseEffect( () => {\r\n\t\tvalue.client.query( { query: gql`query { checkAuth }` } )\r\n\t\t.then( res => (!res.data.checkAuth) ? props.history.push( \"/auth\" ) : setAuth(true) )\r\n\t\t.catch( err => props.history.push( \"/auth\" ) )\r\n\t} )\r\n\r\n\treturn (\r\n\t\t<Content>\r\n\t\t\t\t{auth ? <CreatePostDisplay /> : null}\r\n\t\t</Content>\r\n\t\t)\r\n\r\n}\r\n\r\n\r\nexport default CreatePost"]},"metadata":{},"sourceType":"module"}