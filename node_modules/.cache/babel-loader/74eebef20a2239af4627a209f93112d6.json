{"ast":null,"code":"import _taggedTemplateLiteral from \"A:\\\\HTML 5\\\\graphQL\\\\code\\\\project-create-react-app\\\\post-system\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n         query {\\n          verifyToken(token: \\\"\", \"\\\" ) {\\n           userId\\n           email\\n           exp\\n         }\\n       }\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost';\nimport gql from \"graphql-tag\";\nvar f = {}; //the key used for setting  token on client's localStorage:\n\nvar tokenKey = \"pst\"; //the key used for setting  current url on client's localStorage:\n\nvar urlKey = \"pst-route\";\n\nf.verifyToken = function () {\n  var token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : f.readToken();\n  var client = new ApolloClient({\n    cache: new InMemoryCache(),\n    link: new HttpLink()\n  });\n  return client.query({\n    query: gql(_templateObject(), token)\n  }).then(function (res) {\n    try {\n      return res.data.verifyToken;\n    } catch (err) {\n      return null;\n    }\n  }).catch(function (err) {\n    return null;\n  });\n};\n\nf.recordUrl = function () {\n  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  sessionStorage.setItem(urlKey, url);\n  return true;\n};\n\nf.readUrl = function () {\n  var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : urlKey;\n  var url = sessionStorage.getItem(key);\n\n  if (!url) {\n    return null;\n  } else {\n    return url;\n  }\n};\n\nf.sliceText = function (title, description) {\n  //takes the title and description as 2 strings, and returns\n  //the a short snippet for display in all-posts view\n  var shortTitle = title.length > 50 ? title.slice(0, 50).concat(\"...\") : title;\n  var shortDesc = description.length > 200 ? description.slice(0, 200).concat(\"...\") : description;\n  return {\n    shortTitle: shortTitle,\n    shortDesc: shortDesc\n  };\n};\n\nf.writeToken = function (token) {\n  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : tokenKey;\n  localStorage.setItem(key, token);\n  return true;\n};\n\nf.readToken = function () {\n  var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : tokenKey;\n  var token = localStorage.getItem(key);\n\n  if (!token) {\n    return null;\n  } else {\n    return token;\n  }\n};\n\nf.fetchData = function (requestBody) {\n  return fetch(\"http://localhost:8000/graphql\", {\n    method: \"post\",\n    body: JSON.stringify(requestBody),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(function (res) {\n    return res.json();\n  }).then(function (res) {\n    try {\n      return res.data.verifyToken;\n    } catch (err) {\n      return null;\n    }\n  }).catch(function (err) {\n    return console.log(err);\n  });\n};\n\nf.verifyTokenClassic = function () {\n  var token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : f.readToken();\n  var requestBody = {\n    query: \"\\n         query {\\n          verifyToken(token: \\\"\".concat(token, \"\\\" ) {\\n           userId\\n           email\\n           exp\\n         }\\n       }\")\n  };\n  return f.fetchData(requestBody);\n};\n\nf.purify = function (string) {\n  return string.replace(/</g, \"-\").replace(/>/g, \"-\").replace(/\\n/g, \"<br>\").trim().replace(/script/gi, \"\");\n};\n\nexport default f;","map":{"version":3,"sources":["A:\\HTML 5\\graphQL\\code\\project-create-react-app\\post-system\\src\\client\\functions\\functions.js"],"names":["ApolloClient","InMemoryCache","HttpLink","gql","f","tokenKey","urlKey","verifyToken","token","readToken","client","cache","link","query","then","res","data","err","catch","recordUrl","url","sessionStorage","setItem","readUrl","key","getItem","sliceText","title","description","shortTitle","length","slice","concat","shortDesc","writeToken","localStorage","fetchData","requestBody","fetch","method","body","JSON","stringify","headers","json","console","log","verifyTokenClassic","purify","string","replace","trim"],"mappings":"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","sourcesContent":["import { ApolloClient, InMemoryCache, HttpLink } from 'apollo-boost'\r\nimport gql from \"graphql-tag\";\r\n\r\n\r\n\r\nconst f = {}\r\n\r\n//the key used for setting  token on client's localStorage:\r\nconst tokenKey = \"pst\"\r\n\r\n//the key used for setting  current url on client's localStorage:\r\nconst urlKey = \"pst-route\"\r\n\r\n\r\nf.verifyToken = ( token = f.readToken() ) => {\r\n\r\n   const client = new ApolloClient( {\r\n      cache: new InMemoryCache(),\r\n      link: new HttpLink()\r\n   } )\r\n\r\n   return client\r\n      .query( {\r\n         query: gql `\r\n         query {\r\n          verifyToken(token: \"${token}\" ) {\r\n           userId\r\n           email\r\n           exp\r\n         }\r\n       }`\r\n      } )\r\n      .then( res => {\r\n         try {\r\n            return res.data.verifyToken\r\n         } catch ( err ) {\r\n            return null\r\n         }\r\n\r\n      } )\r\n      .catch( err => null )\r\n\r\n}\r\n\r\nf.recordUrl = ( url = \"\" ) => {\r\n   sessionStorage.setItem( urlKey, url )\r\n   return true\r\n}\r\nf.readUrl = (key = urlKey) => {\r\n  const url = sessionStorage.getItem( key )\r\n   if ( !url ) { return null } else { return url }\r\n}\r\n\r\nf.sliceText = ( title, description ) => {\r\n   //takes the title and description as 2 strings, and returns\r\n   //the a short snippet for display in all-posts view\r\n   let shortTitle = (title.length > 50) ? title.slice( 0, 50 ).concat( \"...\" ) : title\r\n   let shortDesc = (description.length > 200) ? description.slice( 0, 200 ).concat( \"...\" ) : description\r\n   return {\r\n      shortTitle,\r\n      shortDesc\r\n   }\r\n}\r\n\r\nf.writeToken = ( token, key = tokenKey ) => {\r\n   localStorage.setItem( key, token )\r\n   return true;\r\n}\r\n\r\nf.readToken = ( key = tokenKey ) => {\r\n   const token = localStorage.getItem( key )\r\n   if ( !token ) { return null } else { return token }\r\n}\r\n\r\n\r\nf.fetchData = ( requestBody ) => {\r\n\r\n   return fetch( \"http://localhost:8000/graphql\", {\r\n         method: \"post\",\r\n         body: JSON.stringify( requestBody ),\r\n         headers: {\r\n            \"Content-Type\": \"application/json\"\r\n         }\r\n      } )\r\n      .then( res => res.json() )\r\n      .then( res => {\r\n         try {\r\n            return res.data.verifyToken\r\n         } catch ( err ) {\r\n            return null\r\n         }\r\n      } )\r\n      .catch( err => console.log( err ) )\r\n\r\n}\r\n\r\nf.verifyTokenClassic = ( token = f.readToken() ) => {\r\n\r\n   let requestBody = {\r\n      query: `\r\n         query {\r\n          verifyToken(token: \"${token}\" ) {\r\n           userId\r\n           email\r\n           exp\r\n         }\r\n       }`\r\n   }\r\n   return f.fetchData( requestBody )\r\n}\r\n\r\nf.purify= (string) => {\r\n  return string.replace(/</g, \"-\").replace(/>/g, \"-\").replace(/\\n/g, \"<br>\").trim().replace(/script/gi, \"\")\r\n}\r\n\r\n\r\n\r\n\r\nexport default f"]},"metadata":{},"sourceType":"module"}